{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"P\u00e1gina Inicial - BigDataAirlines","text":"<p>O intuito desse reposit\u00f3rio \u00e9 um pequeno estudo de caso utilizando dados de avia\u00e7\u00e3o, disponibilizados em diferentes formatos de arquivo, nominalmente json e csv. Al\u00e9m do consumo de uma API a partir dos dados presentes nesses arquivos.</p> <p>Na sequ\u00eancia, os dados passam por uma pipeline anal\u00edtica com os resultados sendo apresentados em um Dashboard via streamlit</p> <pre><code>---\ntitle: Diagrama da solu\u00e7\u00e3o\n---\nflowchart TD\n    aircia[\"air_cia_1.csv\n    .\n    .\n    .\n    air_cia_n.csv\"]\n    vra[\"vra_1.json\n    .\n    .\n    .\n    vra_n.csv\"]\n    staging[\"Camada Staging\"]\n    API[\"API Airport Info\"]\n    analytic[\"Camada Anal\u00edtica\"]\n    aircia -- air_cia.parquet --&gt; staging\n    vra -- vra.parquet --&gt; staging\n    vra -- icao_code --&gt; API\n    API -- aerodromos.parquet --&gt; staging\n    staging -- pipeline anal\u00edtica --&gt; analytic\n    analytic --&gt; Dashboard</code></pre>"},{"location":"staging/","title":"Pipeline Staging","text":""},{"location":"staging/#funcoes-de-extracao","title":"Fun\u00e7\u00f5es de extra\u00e7\u00e3o","text":""},{"location":"staging/#extract_vra_json","title":"extract_vra_json","text":"<p>Fun\u00e7\u00e3o que l\u00ea a pasta de json's de VRA e retorna um \u00fanico Pandas Dataframe</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>Caminho dos jsons de VRA</p> required <p>Return:     df_vra (pd.DataFrame): Dataframe resultante da compila\u00e7\u00e3o de todos os jsons</p> Source code in <code>src/staging/extract.py</code> <pre><code>def extract_vra_json(path: str) -&gt; pd.DataFrame:\n    \"\"\"\n    Fun\u00e7\u00e3o que l\u00ea a pasta de json's de VRA e retorna um \u00fanico Pandas Dataframe\n\n    Params:\n        path (str): Caminho dos jsons de VRA\n    Return:\n        df_vra (pd.DataFrame): Dataframe resultante da compila\u00e7\u00e3o de todos os jsons\n    \"\"\"\n\n    all_files = glob.glob(path)\n    df_vra = pd.concat(\n        (\n            pd.read_json(file, encoding='utf_8_sig', dtype=True)\n            for file in all_files\n        ),\n        ignore_index=True,\n    )\n    return df_vra\n</code></pre>"},{"location":"staging/#extract_air_csv","title":"extract_air_csv","text":"<p>Fun\u00e7\u00e3o que l\u00ea a pasta de csv's de AIR_CIA e retorna um \u00fanico Pandas Dataframe</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>Caminho dos csv's de AIR_CIA</p> required <p>Return:     df_vra (pd.DataFrame): Dataframe resultante da compila\u00e7\u00e3o de todos os csv's</p> Source code in <code>src/staging/extract.py</code> <pre><code>def extract_air_csv(path: str) -&gt; pd.DataFrame:\n    \"\"\"\n    Fun\u00e7\u00e3o que l\u00ea a pasta de csv's de AIR_CIA e retorna um \u00fanico Pandas Dataframe\n\n    Params:\n        path (str): Caminho dos csv's de AIR_CIA\n    Return:\n        df_vra (pd.DataFrame): Dataframe resultante da compila\u00e7\u00e3o de todos os csv's\n    \"\"\"\n\n    all_files = glob.glob(path)\n    df_air_cia = pd.concat(\n        [pd.read_csv(file, sep=';') for file in all_files], ignore_index=True\n    )\n    return df_air_cia\n</code></pre>"}]}